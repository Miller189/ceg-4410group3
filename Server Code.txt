package ceg.pkg4410_server;

import java.io.IOException;
import static java.lang.Thread.sleep;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.SocketException;
import java.util.ArrayList;

public class CEG4410_Server {
    
    private ArrayList<Socket> connectionList;
    
    private static byte[] convertIntToBytes(int value) {
        return new byte[] {
            (byte)(value >> 24), // First set 8 bits (MSB)
            (byte)(value >> 16), // Second set of 8 bits
            (byte)(value >> 8),  // Third set of 8 bits
            (byte)value};        // Fourth set of 8 (LSB)
    }

    public static void main(String[] args) throws IOException, InterruptedException {
        CEG4410_Server server = new CEG4410_Server();
        server.connectionList = new ArrayList(100);
        Runnable broadcastHandler = server.new BroadcastHandler(convertIntToBytes(5000), InetAddress.getByName("255.255.255.255"), 4445);
        new Thread(broadcastHandler).start();
        Runnable connectionHandler = server.new ConnectionHandler();
        new Thread(connectionHandler).start();
    } // main

    public class Broadcast {

        private DatagramSocket socket;
        private DatagramPacket packet;

        Broadcast() throws SocketException {
            socket = new DatagramSocket();
            socket.setBroadcast(true);
        }

        void constructMessage(byte[] broadcastMessage, InetAddress broadcastAddress, int brodcastPort) {
            packet = new DatagramPacket(broadcastMessage, broadcastMessage.length, broadcastAddress, brodcastPort);
        }

        void broadcast() throws IOException {
            socket.send(packet);
        }

        void stopBroadcast() {
            socket.close();
        }
    } // Broadcast

    private class BroadcastHandler implements Runnable {
        
        private byte[] broadcastMessage;
        private InetAddress broadcastAddress;
        private int broadcastPort;

        BroadcastHandler(byte[] broadcastMessage, InetAddress broadcastAddress, int broadcastPort) {
            this.broadcastMessage = broadcastMessage;
            this.broadcastAddress = broadcastAddress;
            this.broadcastPort = broadcastPort;
        }

        @Override
        public void run() {
            try {
                Broadcast broadcast = new Broadcast();
                broadcast.constructMessage(broadcastMessage, broadcastAddress, broadcastPort);
                for (int i = 0; i < 5; i++) {
                    broadcast.broadcast();
                    sleep(3000);
                }
                broadcast.stopBroadcast();
            } catch (IOException | InterruptedException e) {
                // TODO: Exception handling
            }
        }
    } // BroadcastHandler

    private class ConnectionHandler implements Runnable {
        
        @Override
        public void run() {
            try {
                connectionList.add(new ServerSocket(5000).accept());
            } catch (IOException ex) {
                // TODO: Exception handling
            }
        }

    } // ConnectionHandler
    
} // CEG4410_Server
